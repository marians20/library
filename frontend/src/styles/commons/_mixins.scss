/*Styleguide base*/
/// Content centering mixin
///
/// @param {Boolean} $x (false) - Position on X axis
/// @param {Boolean} $y (false) - Position on Y axis
/// NOTE: If $x and $y stay false, the element will be centered on both X and Y axis
@mixin absolute-center($x: false, $y: false) {
    position: absolute;

    @if $x == true {
        /*transform: translateX(-50%);*/
        @include transform(translateX(-50%));
        left: 50%;
    }
    @else if $y == true {
        /*transform: translateY(-50%);*/
        @include transform(translateY(-50%));
        top: 50%;
    }
    @else {
        top: 50%;
        left: 50%;
        /*transform: translate(-50%, -50%);*/
        @include transform(translate(-50%, -50%));
    }
}

// Mixin for clearfix
@mixin clearfix {
    &:after {
        content: "" !important;
        display: block !important;
        clear: both !important;
    }
}

// Used to style the focus and the hover of an element at the same time
// e.g. @include hocus { color: red; }
@mixin hocus {
    &:focus,
    &:hover {
        @content;
    }
}

/*Start Flexbox mixins*/
@mixin display-flex($important: false) {
    @if $important == true{
        display: -webkit-box !important;
        display: -moz-box !important;
        display: -ms-flexbox !important;
        display: -webkit-flex !important;
        display: flex !important;
    }
    @else{
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
    }

}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
    -webkit-flex-direction: $direction;
    -moz-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
    -webkit-flex-flow: $flow;
    -moz-flex-flow: $flow;
    -ms-flex-flow: $flow;
    flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
    -webkit-box-ordinal-group: $val;
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    -webkit-order: $val;
    order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
    -webkit-flex-grow: $grow;
    -moz-flex-grow: $grow;
    -ms-flex-grow: $grow;
    flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
    -webkit-flex-shrink: $shrink;
    -moz-flex-shrink: $shrink;
    -ms-flex-shrink: $shrink;
    flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
    -webkit-flex-basis: $width;
    -moz-flex-basis: $width;
    -ms-flex-basis: $width;
    flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
    -webkit-justify-content: $justify;
    -moz-justify-content: $justify;
    -ms-justify-content: $justify;
    -ms-flex-pack: $justify;
    justify-content: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
    -webkit-align-content: $align;
    -moz-align-content: $align;
    -ms-align-content: $align;
    align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
    -webkit-align-items: $align;
    -moz-align-items: $align;
    -ms-align-items: $align;
    align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
    -webkit-align-self: $align;
    -moz-align-self: $align;
    -ms-align-self: $align;
    align-self: $align;
}
/*End Flexbox mixins*/

@mixin box-sizing($type: border-box) {
    -webkit-box-sizing: $type;
    -moz-box-sizing: $type;
    box-sizing: $type;
}

@mixin text-shadow($string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
    text-shadow: $string;
}

@mixin box-shadow($string) {
    -webkit-box-shadow: $string;
    -moz-box-shadow: $string;
    box-shadow: $string;
}

@mixin drop-shadow($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {
    -webkit-box-shadow: $x $y $blur $spread rgba(0, 0, 0, $alpha);
    -moz-box-shadow: $x $y $blur $spread rgba(0, 0, 0, $alpha);
    box-shadow: $x $y $blur $spread rgba(0, 0, 0, $alpha);
}

@mixin inner-shadow($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {
    -webkit-box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
    -moz-box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
    box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
}

@mixin border-radius($radius: 5px) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
    //-moz-background-clip: padding;
    //-webkit-background-clip: padding-box;
    //background-clip: padding-box;
}

// Specific mixin
// TODO remove
@mixin tooltip-arrow-size($size) {
    width: 0px;
    height: 0px;
    border: $size solid transparent;
    border-top-color: transparent;
    border-right-color: transparent;
    border-left-color: transparent;
    border-bottom-style: solid;
    border-bottom-width: $size;
}

// Specific mixin
// TODO remove
@mixin tooltip-arrow-color($color) {
    border-bottom-color: $color;
}

@mixin opacity($opacity: 0.5) {
    -webkit-opacity: $opacity;
    -moz-opacity: $opacity;
    -ms-filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity='#{$opacity}*100')");
    filter: alpha(opacity=$opacity);
    -moz-opacity: $opacity;
    -khtml-opacity: $opacity;
    opacity: $opacity;
}

@mixin gradient($startColor: #eee, $endColor: white) {
    background-color: $startColor;
    background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
    background: -webkit-linear-gradient(top, $startColor, $endColor);
    background: -moz-linear-gradient(top, $startColor, $endColor);
    background: -ms-linear-gradient(top, $startColor, $endColor);
    background: -o-linear-gradient(top, $startColor, $endColor);
}

@mixin horizontal-gradient($startColor: #eee, $endColor: white) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(left, $startColor, $endColor);
    background-image: -moz-linear-gradient(left, $startColor, $endColor);
    background-image: -ms-linear-gradient(left, $startColor, $endColor);
    background-image: -o-linear-gradient(left, $startColor, $endColor);
}

@mixin animation($name, $duration: 300ms, $delay: 0, $ease: ease) {
    -webkit-animation: $name $duration $delay $ease;
    -moz-animation: $name $duration $delay $ease;
    -ms-animation: $name $duration $delay $ease;
    animation: $name $duration $delay $ease;
}

@mixin animation-delay($delay) {
    -webkit-animation-delay: $delay;
    animation-delay: $delay;
}

@mixin animation($animation...) {
    -o-animation: $animation;
    -moz-animation: $animation;
    -webkit-animation: $animation;
    animation: $animation;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }

    @-moz-keyframes #{$animationName} {
        @content;
    }

    @-o-keyframes #{$animationName} {
        @content;
    }

    @keyframes #{$animationName} {
        @content;
    }
}

@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

@mixin transform($string) {
    -webkit-transform: $string;
    -moz-transform: $string;
    -ms-transform: $string;
    -o-transform: $string;
    transform: $string;
}

@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;
}

@mixin perspective($value: 1000) {
    -webkit-perspective: $value;
    -moz-perspective: $value;
    -ms-perspective: $value;
    perspective: $value;
}

@mixin padding-start($padding: 0) {
    -webkit-padding-start: $padding;
    -moz-padding-start: $padding;
    -o-padding-start: $padding;
    -khtml-padding-start: $padding;
    padding-start: $padding;
}

@mixin optional-at-root($sel) {
    @at-root #{if(not &, $sel, selector-append(&, $sel))} {
        @content;
    }
}

@mixin placeholder {
    @include optional-at-root('::-webkit-input-placeholder') {
        @content;
    }

    @include optional-at-root(':-moz-placeholder') {
        @content;
    }

    @include optional-at-root('::-moz-placeholder') {
        @content;
    }

    @include optional-at-root(':-ms-input-placeholder') {
        @content;
    }
}

@mixin appearance ($value: none) {
    -webkit-appearance: $value;
    -moz-appearance: $value;
    appearance: $value;
}

@mixin calc($property, $expression) {
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: -moz-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

@mixin user-select($value: none) {
    -webkit-touch-callout: $value;
    -webkit-user-select: $value;
    -khtml-user-select: $value;
    -moz-user-select: $value;
    -ms-user-select: $value;
    user-select: $value;
}

@mixin reset-position{
    top: auto;
    right: auto;
    bottom: auto;
    left: auto;
}

//TODO move in normalizer
@mixin reset-list-element {
    list-style: none;
    margin: 0;
    padding: 0;

    & > li {
        margin: 0;
        padding: 0;
    }

}

//TODO replace arrow with this
@mixin arrow($side: top, $size: 10px, $color: #000000) {
    $width: $size / 2;

    width: 0;
    height: 0;

    // Reset border for easy overwrite
    border: none;
    @if $side == 'left' {
        border-right: $width solid $color;
        border-top: $width solid transparent;
        border-bottom: $width solid transparent;
    }

    @if $side == 'right' {
        border-left: $width solid $color;
        border-top: $width solid transparent;
        border-bottom: $width solid transparent;
    }

    @if $side == 'bottom' {
        border-top: $width solid $color;
        border-left: $width solid transparent;
        border-right: $width solid transparent;
    }

    @if $side == 'top' {
        border-bottom: $width solid $color;
        border-left: $width solid transparent;
        border-right: $width solid transparent;
    }
}

@mixin scrollbar($color) {

    &::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }

    &::-webkit-scrollbar-thumb {
        background: $color;
    }

    &::-webkit-scrollbar-track {
        background: $color-assistant-3;
    }

    scrollbar-face-color: $color;
    scrollbar-shadow-color: $color-assistant-0;
    scrollbar-arrow-color: $color;
    scrollbar-track-color: $color-assistant-0;

}
%overflow-dots{
    text-overflow: ellipsis;
    white-space: pre;
    overflow: hidden;
}


/*PLASS Style*/
%component{
    display: flex;
}
%page-component{
    @extend %component;
    flex-direction: column;
    flex: 1;

    width: 100%;
    height: auto;
    // max-width: calc(100% - #{$sidemenu-width});
    max-height: 100%;
    overflow-x: hidden;
    overflow-y: auto;
}